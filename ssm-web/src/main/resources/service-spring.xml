<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context.xsd
	 http://www.springframework.org/schema/aop
	 http://www.springframework.org/schema/aop/spring-aop.xsd
	 http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd" default-lazy-init="false">
	<!-- 扫描 com.dzf 及其所有子包下类 -->
	<context:component-scan base-package="com.dzf">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 加载 properties 配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties" />
	<!-- 开启自动扫描 -->
	<!-- 开启注解的方式 aop -->
	<aop:aspectj-autoproxy />
	<!-- 配置数据源 -->
	<!-- 配置 c3p0 数据源 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 
		<property name="driverClass" value="${jdbc.driver}"/> <property name="jdbcUrl" 
		value="${jdbc.url}"/> <property name="user" value="${jdbc.username}"/> <property 
		name="password" value="${jdbc.password}"/> <property name="maxPoolSize" value="30"/> 
		<property name="minPoolSize" value="10"/> 关闭连接后不自动commit <property name="autoCommitOnClose" 
		value="false"/> 获取连接超时时间 <property name="checkoutTimeout" value="10000"/> 
		当获取连接失败重试次数 <property name="acquireRetryAttempts" value="2"/> </bean> -->

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<!--日志打印可执行的sql -->
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="dataSourceLogEnabled" value="true" />
		<property name="connectionLogEnabled" value="true" />
		<property name="statementLogEnabled" value="true" />
		<property name="resultSetLogEnabled" value="true" />
	</bean>

	<!-- 配置Druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,wall" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>


	<!-- 配置事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 设置事物增强 对那些方法加上事务 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- aop 切面配置 -->
	<!-- <aop:config> <aop:pointcut id="servicePointcut" expression="execution(* 
		com.dzf.service..*.*(..))" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut" 
		/> </aop:config> -->

	<!-- 使用事务注解的方式 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 配置 sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 自动扫描 com/dzf/mapper 目录下的所有 SQL 映射的 xml 文 件, 省掉 mybatis.xml 里的手工配置 
			value="classpath:com/shsxt/crm/mapper/*.xml"指的是 classpath(类路径) 下 com.shsxt.crm.mapper 
			包中的所有 xml 文件 UserMapper.xml 位于 com.shsxt.crm.mapper 包下，这样 UserMapper.xml 
			就可 以被自动扫描 -->
		<property name="mapperLocations" value="classpath:com/dzf/mapper/*.xml" />
	</bean>

	<!-- 配置扫描器 使用扫描的形式引入所有的接口类 引入后可以使用类名，首字母小写即可！ -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描 com.dzf.dao 这个包以及它的子包下的所有映射接口类 动态实现dao，注入到spring容器中去 -->
		<property name="basePackage" value="com.dzf.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<bean id="requestFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="readTimeout" value="10000" />
		<property name="connectTimeout" value="5000" />
	</bean>

	<!-- 配置RestTemplate这个远程访问 -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="requestFactory" />
		<!-- <property name="messageConverters"> <list> <bean class="org.springframework.http.converter.FormHttpMessageConverter"/> 
			<bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"/> 
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/> 
			<bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
			<property name="supportedMediaTypes"> <list> <value>text/plain;charset=UTF-8</value> 
			</list> </property> </bean> </list> </property> -->
	</bean>

	<!-- 配置rmi远程访问的服务端 bean中id属性有且只有一个，出现同名的要么最后面一个把之前的全部覆盖掉（spring默认设置），要么会报错（如果spring 
		设置不可以覆盖di相同的bean定义，那么就出报错）， 如果只配置了name属性，没有配置id属性，那么默认name属性的值为id属性的值 -->
	<bean name="rmiServerService" class="com.dzf.service.RmiServerServiceImpl"></bean>
	<bean name="rmiTest" class="org.springframework.remoting.rmi.RmiServiceExporter">
		<property name="service" ref="rmiServerService" />
		<property name="serviceName" value="rmiServerService" />
		<!--这个地方必须写接口的位置全限定名 -->
		<property name="serviceInterface" value="com.dzf.service.RmiServerService" />
		<!-- 这个端口不能和项目的端口一样，是个独立的端口 -->
		<property name="registryPort" value="8083" />
	</bean>
	<!-- ###############################-Redis-########################################### -->
	<!-- 配置redis和spring 的整合 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWaitMills}" />
		<!-- <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" /> -->
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.masterHost}" />
		<property name="port" value="${redis.masterPort}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="password" value="${redis.masterPassword}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean id="template" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 开启事务 -->
		<property name="enableTransactionSupport" value="true" />
		<!-- 序列化策略 推荐使用StringRedisSerializer -->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
	</bean>
</beans>
 